name: Deploy to Azure

on:
    push:
        branches: [main]
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to deploy to"
                required: true
                default: "dev"
                type: choice
                options:
                    - dev
                    - staging
                    - prod

env:
    DOTNET_VERSION: "8.0.x"

jobs:
    build-and-test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore

            - name: Build
              run: dotnet build --no-restore --configuration Release

            - name: Run unit tests
              run: dotnet test tests/AcademicAssessment.Tests.Unit --no-build --configuration Release --verbosity normal

            - name: Publish application
              run: dotnet publish src/AcademicAssessment.Web/AcademicAssessment.Web.csproj --configuration Release --output ./publish

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: webapp
                  path: ./publish

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-test
        environment:
            name: ${{ github.event.inputs.environment || 'dev' }}
            url: ${{ steps.deploy.outputs.webapp-url }}

        steps:
            - uses: actions/checkout@v4

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: webapp
                  path: ./publish

            - name: Azure Login
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Get secrets from Key Vault
              uses: azure/CLI@v2
              with:
                  inlineScript: |
                      echo "Retrieving secrets from Key Vault..."
                      B2C_CLIENT_ID=$(az keyvault secret show --vault-name ${{ secrets.AZURE_KEY_VAULT_NAME }} --name AzureAdB2C-ClientId --query value -o tsv)
                      B2C_CLIENT_SECRET=$(az keyvault secret show --vault-name ${{ secrets.AZURE_KEY_VAULT_NAME }} --name AzureAdB2C-ClientSecret --query value -o tsv)
                      B2C_TENANT_ID=$(az keyvault secret show --vault-name ${{ secrets.AZURE_KEY_VAULT_NAME }} --name AzureAdB2C-TenantId --query value -o tsv)

                      echo "::add-mask::$B2C_CLIENT_SECRET"
                      echo "B2C_CLIENT_ID=$B2C_CLIENT_ID" >> $GITHUB_ENV
                      echo "B2C_CLIENT_SECRET=$B2C_CLIENT_SECRET" >> $GITHUB_ENV
                      echo "B2C_TENANT_ID=$B2C_TENANT_ID" >> $GITHUB_ENV

            - name: Run database migrations
              env:
                  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION_STRING }}
              run: |
                  dotnet tool install --global dotnet-ef
                  dotnet ef database update \
                    --project src/AcademicAssessment.Infrastructure \
                    --startup-project src/AcademicAssessment.Web \
                    --connection "$POSTGRES_CONNECTION"

            - name: Deploy to Azure Web App
              id: deploy
              uses: azure/webapps-deploy@v3
              with:
                  app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
                  package: ./publish

            - name: Configure App Settings
              uses: azure/appservice-settings@v1
              with:
                  app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
                  app-settings-json: |
                      [
                        {
                          "name": "AzureAdB2C__ClientId",
                          "value": "${{ env.B2C_CLIENT_ID }}",
                          "slotSetting": false
                        },
                        {
                          "name": "AzureAdB2C__ClientSecret",
                          "value": "${{ env.B2C_CLIENT_SECRET }}",
                          "slotSetting": false
                        },
                        {
                          "name": "AzureAdB2C__TenantId",
                          "value": "${{ env.B2C_TENANT_ID }}",
                          "slotSetting": false
                        },
                        {
                          "name": "ASPNETCORE_ENVIRONMENT",
                          "value": "${{ github.event.inputs.environment || 'Development' }}",
                          "slotSetting": false
                        }
                      ]

            - name: Restart Web App
              run: az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

            - name: Health check
              run: |
                  echo "Waiting for app to start..."
                  sleep 30
                  HEALTH_URL="https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
                  echo "Checking health endpoint: $HEALTH_URL"
                  curl -f $HEALTH_URL || exit 1
                  echo "âœ… Health check passed"

            - name: Azure logout
              run: az logout

    integration-tests:
        runs-on: ubuntu-latest
        needs: deploy
        if: github.event.inputs.environment != 'prod'

        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Azure Login
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Run integration tests against deployed app
              env:
                  API_BASE_URL: https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net
                  B2C_TENANT_ID: ${{ secrets.AZURE_B2C_TENANT_ID }}
              run: |
                  dotnet test tests/AcademicAssessment.Tests.Integration \
                    --configuration Release \
                    --logger "trx;LogFileName=integration-test-results.trx" \
                    --verbosity normal

            - name: Upload test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: integration-test-results
                  path: "**/integration-test-results.trx"
