name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: "8.0.x"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Display .NET info
        run: dotnet --info

      - name: Restore dependencies
        run: dotnet restore EduMind.AI.sln

      - name: Build solution
        run: dotnet build EduMind.AI.sln --configuration Release --no-restore

      - name: Run unit tests with coverage
        run: |
          dotnet test tests/AcademicAssessment.Tests.Unit \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger "trx;LogFileName=unit-test-results.trx"

      - name: Run performance tests
        run: |
          dotnet test tests/AcademicAssessment.Tests.Performance \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=perf-test-results.trx"

      - name: Setup test infrastructure for integration tests
        run: |
          echo "Starting PostgreSQL and Redis for integration tests..."
          docker-compose -f docker-compose.test.yml up -d
          
          echo "Waiting for services to be healthy..."
          docker-compose -f docker-compose.test.yml ps
          
          # Wait for health checks to pass
          for i in {1..30}; do
            if docker-compose -f docker-compose.test.yml ps | grep -q "healthy"; then
              echo "Services are healthy!"
              break
            fi
            echo "Waiting for services... ($i/30)"
            sleep 2
          done
          
          # Verify services are responding
          docker-compose -f docker-compose.test.yml exec -T postgres-test pg_isready -U edumind_test_user -d edumind_test
          docker-compose -f docker-compose.test.yml exec -T redis-test redis-cli ping

      - name: Apply database migrations
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=edumind_test;Username=edumind_test_user;Password=edumind_test_password"
        run: |
          dotnet ef database update \
            --project src/AcademicAssessment.Infrastructure \
            --startup-project src/AcademicAssessment.Web \
            --context AcademicContext

      - name: Run integration tests (all PRs and pushes)
        env:
          LLM_PROVIDER: Stub # Use StubLLMService instead of OLLAMA in CI
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=edumind_test;Username=edumind_test_user;Password=edumind_test_password"
          ConnectionStrings__RedisConnection: "localhost:6379"
          ASPNETCORE_ENVIRONMENT: Testing
        run: |
          dotnet test tests/AcademicAssessment.Tests.Integration \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=integration-test-results.trx" \
            --logger "console;verbosity=detailed"

      - name: Upload service logs on failure
        if: failure()
        run: |
          echo "=== PostgreSQL Logs ==="
          docker-compose -f docker-compose.test.yml logs postgres-test || true
          echo "=== Redis Logs ==="
          docker-compose -f docker-compose.test.yml logs redis-test || true

      - name: Cleanup test infrastructure
        run: |
          docker-compose -f docker-compose.test.yml logs postgres-test > postgres-test-logs.txt || true
          docker-compose -f docker-compose.test.yml logs redis-test > redis-test-logs.txt || true
          docker-compose -f docker-compose.test.yml down -v --remove-orphans
        if: always()

      - name: Upload service logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: service-logs
          path: "*-test-logs.txt"
          retention-days: 7

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: "coverage/**/coverage.cobertura.xml"
          targetdir: "coverage-report"
          reporttypes: "Html;MarkdownSummaryGithub"
          sourcedirs: "src"
          title: "EduMind.AI Code Coverage"

      - name: Add coverage comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: coverage-report/SummaryGithub.md

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage-report
          retention-days: 30

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET Tests
          path: "**/*test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: "**/*test-results.trx"
          retention-days: 30

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore EduMind.AI.sln

      - name: Check formatting
        run: dotnet format EduMind.AI.sln --verify-no-changes --verbosity diagnostic

      - name: Run code analysis
        run: dotnet build EduMind.AI.sln --configuration Release /p:EnforceCodeStyleInBuild=true /p:TreatWarningsAsErrors=false

  build-matrix:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore EduMind.AI.sln

      - name: Build solution
        run: dotnet build EduMind.AI.sln --configuration Release --no-restore

      - name: Run unit tests only (matrix build)
        env:
          LLM_PROVIDER: Stub # Use stub for cross-platform testing
        run: dotnet test tests/AcademicAssessment.Tests.Unit --configuration Release --no-build --verbosity normal
