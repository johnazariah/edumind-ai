@page "/assessment/{AssessmentId:guid}/session"
@using AcademicAssessment.Core.Enums
@using AcademicAssessment.Core.Models.Dtos
@using AcademicAssessment.StudentApp.Components.AssessmentSession
@using AcademicAssessment.StudentApp.Components.Shared

@if (isLoading)
{
    <div class="d-flex align-items-center gap-2 text-muted">
        <div class="spinner-border" role="status"></div>
        <span>Loading assessment session...</span>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (session is null)
{
    <div class="alert alert-warning" role="alert">
        The assessment session could not be started. Please return to the <a href="/assessments">dashboard</a> and try again.
    </div>
}
else
{
    <AssessmentNavigation CurrentTitle="@session.AssessmentTitle"
                          CurrentStep="@CurrentQuestionNumber"
                          TotalSteps="@TotalQuestions"
                          OnSaveAndExit="EventCallback.Factory.Create(this, SaveProgressAndExitAsync)" />

    <div class="row g-4">
        <div class="col-lg-8">
            @if (CurrentQuestion is not null)
            {
                <QuestionRenderer Question="@CurrentQuestion" />

                <section class="answer-section mt-4">
                    @switch (CurrentQuestion.QuestionType)
                    {
                        case QuestionType.MultipleChoice:
                        case QuestionType.MultipleSelect:
                        case QuestionType.TrueFalse:
                            <MultipleChoiceAnswer Question="@CurrentQuestion"
                                                 SelectedOptions="@GetSelectedOptions(CurrentQuestion.Id)"
                                                 SelectedOptionsChanged="value => UpdateSelectedOptionsAsync(CurrentQuestion.Id, value)"
                                                 Disabled="@IsSessionExpired" />
                            break;

                        case QuestionType.ShortAnswer:
                        case QuestionType.FillInBlank:
                        case QuestionType.MathExpression:
                            <ShortAnswerInput Value="@GetFreeResponse(CurrentQuestion.Id)"
                                              ValueChanged="value => UpdateFreeResponseAsync(CurrentQuestion.Id, value)"
                                              Placeholder="Provide your answer"
                                              Disabled="@IsSessionExpired" />
                            break;

                        case QuestionType.Essay:
                            <EssayAnswerInput Value="@GetFreeResponse(CurrentQuestion.Id)"
                                              ValueChanged="value => UpdateFreeResponseAsync(CurrentQuestion.Id, value)"
                                              Disabled="@IsSessionExpired" />
                            break;

                        default:
                            <div class="alert alert-info" role="alert">
                                This question type is not yet supported. Please add your notes in the text box below.
                            </div>
                            <EssayAnswerInput Value="@GetFreeResponse(CurrentQuestion.Id)"
                                              ValueChanged="value => UpdateFreeResponseAsync(CurrentQuestion.Id, value)"
                                              Placeholder="Record your response"
                                              Disabled="@IsSessionExpired" />
                            break;
                    }
                </section>

                <div class="d-flex flex-wrap gap-2 mt-4">
                    <button class="btn btn-outline-warning" type="button" @onclick="ToggleReview" disabled="@IsSessionExpired">
                        @(IsMarkedForReview() ? "Remove Review Flag" : "Mark for Review")
                    </button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="ClearCurrentAnswer" disabled="@IsSessionExpired">Clear Response</button>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <button class="btn btn-link" type="button" @onclick="PreviousQuestion" disabled="@(CurrentQuestionNumber <= 1)">Previous</button>
                    <span class="text-muted">Question @CurrentQuestionNumber of @TotalQuestions</span>
                    <button class="btn btn-link" type="button" @onclick="NextQuestion" disabled="@(CurrentQuestionNumber >= TotalQuestions)">Next</button>
                </div>
            }
        </div>

        <div class="col-lg-4">
            <aside class="card shadow-sm h-100">
                <div class="card-body d-flex flex-column gap-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-0">Time Remaining</h6>
                            <small class="text-muted">Assessment ends @(session.ExpiresAt.LocalDateTime.ToString("h:mm tt"))</small>
                        </div>
                        <span class="badge @(IsSessionExpired ? "bg-danger" : timeRemaining.TotalMinutes < 5 ? "bg-warning text-dark" : "bg-success")">
                            @TimeRemainingDisplay
                        </span>
                    </div>

                    <div>
                        <div class="d-flex justify-content-between small text-muted">
                            <span>Progress</span>
                            <span>@ProgressPercent%</span>
                        </div>
                        <div class="progress" role="progressbar" aria-valuenow="@ProgressPercent" aria-valuemin="0" aria-valuemax="100">
                            <div class="progress-bar" style="width: @ProgressPercent%"></div>
                        </div>
                    </div>

                    <div class="bg-light border rounded p-2">
                        <small class="text-muted">@BuildAutoSaveStatus()</small>
                    </div>

                    <QuestionPalette QuestionCount="@TotalQuestions"
                                     CurrentQuestion="@CurrentQuestionNumber"
                                     AnsweredQuestions="@GetAnsweredQuestions()"
                                     ReviewQuestions="@GetReviewQuestions()"
                                     Disabled="@IsSessionExpired"
                                     OnNavigate="EventCallback.Factory.Create<int>(this, NavigateToQuestion)" />

                    <div class="d-grid gap-2 mt-auto">
                        <button class="btn btn-outline-secondary" type="button" @onclick="SaveProgressAsync" disabled="@(IsSessionExpired || isAutoSaving)">Save Progress</button>
                        <button class="btn btn-success" type="button" @onclick="SubmitAssessmentAsync" disabled="@IsSessionExpired">Submit Assessment</button>
                    </div>
                </div>
            </aside>
        </div>
    </div>
}