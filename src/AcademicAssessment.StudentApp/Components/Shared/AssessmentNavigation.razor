@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<div class="d-flex flex-column flex-lg-row align-items-lg-center justify-content-between gap-3 mb-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-0">
            <li class="breadcrumb-item"><a href="/assessments">Assessments</a></li>
            <li class="breadcrumb-item active" aria-current="page">@CurrentTitle</li>
        </ol>
    </nav>

    <div class="d-flex align-items-center gap-3 w-100 w-lg-auto">
        <div class="flex-grow-1">
            <div class="d-flex justify-content-between small text-muted">
                <span>@CurrentStepLabel</span>
                <span>@ProgressPercent%</span>
            </div>
            <div class="progress" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="@ProgressPercent">
                <div class="progress-bar bg-success" style="width: @ProgressPercent%"></div>
            </div>
        </div>

        <button type="button" class="btn btn-outline-secondary" @onclick="PromptSaveAndExit">Save & Exit</button>
    </div>
</div>

@code {
    [Parameter]
    public string CurrentTitle { get; set; } = string.Empty;

    [Parameter]
    public int CurrentStep { get; set; } = 1;

    [Parameter]
    public int TotalSteps { get; set; } = 3;

    [Parameter]
    public EventCallback OnSaveAndExit { get; set; }

    private int ProgressPercent => TotalSteps <= 0 ? 0 : (int)Math.Clamp(Math.Round((double)CurrentStep / TotalSteps * 100), 0, 100);

    private string CurrentStepLabel => $"Step {Math.Clamp(CurrentStep, 1, TotalSteps)} of {Math.Max(TotalSteps, 1)}";

    private async Task PromptSaveAndExit()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Save your progress and exit? You can resume later from the dashboard.");
        if (!confirmed)
        {
            return;
        }

        if (OnSaveAndExit.HasDelegate)
        {
            await OnSaveAndExit.InvokeAsync();
            return;
        }

        Navigation.NavigateTo("/assessments");
    }
}
