@using AcademicAssessment.Core.Models.Dtos

<div class="progress-visualization card shadow-sm mb-3">
    <div class="card-header bg-light">
        <h6 class="mb-0">Progress Overview</h6>
    </div>
    <div class="card-body">
        <!-- Overall Progress -->
        <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
                <span class="small fw-semibold">Overall Progress</span>
                <span class="small fw-semibold">@AnsweredCount / @TotalQuestions</span>
            </div>
            <div class="progress" style="height: 12px;">
                <div class="progress-bar bg-primary" role="progressbar" style="width: @ProgressPercentage%"
                    aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
            <div class="text-center mt-1">
                <span class="small text-muted">@ProgressPercentage% Complete</span>
            </div>
        </div>

        <!-- Status Legend -->
        <div class="row g-2 mb-3">
            <div class="col-6">
                <div class="d-flex align-items-center gap-2">
                    <div class="status-indicator bg-success"></div>
                    <span class="small">Answered (@AnsweredCount)</span>
                </div>
            </div>
            <div class="col-6">
                <div class="d-flex align-items-center gap-2">
                    <div class="status-indicator bg-warning"></div>
                    <span class="small">Flagged (@FlaggedCount)</span>
                </div>
            </div>
            <div class="col-6">
                <div class="d-flex align-items-center gap-2">
                    <div class="status-indicator bg-secondary"></div>
                    <span class="small">Unanswered (@UnansweredCount)</span>
                </div>
            </div>
            <div class="col-6">
                <div class="d-flex align-items-center gap-2">
                    <div class="status-indicator bg-primary"></div>
                    <span class="small">Current</span>
                </div>
            </div>
        </div>

        <!-- Subject Breakdown (if available) -->
        @if (SubjectBreakdown.Any())
        {
            <div class="mt-3 pt-3 border-top">
                <h6 class="small fw-semibold mb-2">By Subject</h6>
                @foreach (var subject in SubjectBreakdown)
                {
                    <div class="mb-2">
                        <div class="d-flex justify-content-between mb-1">
                            <span class="small">@subject.Subject</span>
                            <span class="small">@subject.AnsweredCount / @subject.TotalCount</span>
                        </div>
                        <div class="progress" style="height: 6px;">
                            <div class="progress-bar @GetSubjectProgressClass(subject)"
                                style="width: @subject.ProgressPercentage%">
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        <!-- Time Stats -->
        <div class="mt-3 pt-3 border-top">
            <div class="row g-2 text-center">
                <div class="col-6">
                    <div class="small text-muted">Avg per Question</div>
                    <div class="fw-semibold">@AvgTimePerQuestion</div>
                </div>
                <div class="col-6">
                    <div class="small text-muted">Estimated Finish</div>
                    <div class="fw-semibold">@EstimatedFinishTime</div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 2px;
        flex-shrink: 0;
    }
</style>

@code {
    [Parameter]
    public int TotalQuestions { get; set; }

    [Parameter]
    public int AnsweredCount { get; set; }

    [Parameter]
    public int FlaggedCount { get; set; }

    [Parameter]
    public int ProgressPercentage { get; set; }

    [Parameter]
    public TimeSpan TimeElapsed { get; set; }

    [Parameter]
    public TimeSpan TimeRemaining { get; set; }

    [Parameter]
    public List<SubjectProgressInfo> SubjectBreakdown { get; set; } = new();

    private int UnansweredCount => TotalQuestions - AnsweredCount;

    private string AvgTimePerQuestion
    {
        get
        {
            if (AnsweredCount == 0) return "N/A";
            var avgSeconds = TimeElapsed.TotalSeconds / AnsweredCount;
            return avgSeconds < 60
            ? $"{avgSeconds:F0}s"
            : $"{avgSeconds / 60:F1}m";
        }
    }

    private string EstimatedFinishTime
    {
        get
        {
            if (AnsweredCount == 0 || UnansweredCount == 0) return "N/A";
            var avgSecondsPerQuestion = TimeElapsed.TotalSeconds / AnsweredCount;
            var estimatedRemainingSeconds = avgSecondsPerQuestion * UnansweredCount;
            var estimatedTotal = TimeSpan.FromSeconds(estimatedRemainingSeconds);

            return estimatedTotal.TotalMinutes < 1
            ? $"{estimatedTotal.TotalSeconds:F0}s"
            : $"{estimatedTotal.TotalMinutes:F0}m";
        }
    }

    private static string GetSubjectProgressClass(SubjectProgressInfo subject)
    {
        return subject.ProgressPercentage switch
        {
            >= 80 => "bg-success",
            >= 50 => "bg-primary",
            >= 25 => "bg-warning",
            _ => "bg-secondary"
        };
    }
}