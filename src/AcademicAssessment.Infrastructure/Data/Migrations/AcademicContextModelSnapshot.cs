// <auto-generated />
using System;
using AcademicAssessment.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicAssessment.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AcademicContext))]
    partial class AcademicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcademicAssessment.Core.Models.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AssessmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PassingScorePercentage")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimitMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentType");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("SchoolId");

                    b.HasIndex("Subject");

                    b.ToTable("assessments", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("SchoolId");

                    b.HasIndex("Subject");

                    b.HasIndex("SchoolId", "Code")
                        .IsUnique();

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("CourseAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LearningObjectives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CourseAdminId");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("Subject");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerOptions")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Explanation")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("integer");

                    b.Property<double?>("IrtDifficulty")
                        .HasColumnType("double precision");

                    b.Property<double?>("IrtDiscrimination")
                        .HasColumnType("double precision");

                    b.Property<double?>("IrtGuessing")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAiGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("LearningObjectives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.Property<int>("TimesAnswered")
                        .HasColumnType("integer");

                    b.Property<int>("TimesCorrect")
                        .HasColumnType("integer");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContentHash");

                    b.HasIndex("CourseId");

                    b.HasIndex("DifficultyLevel");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("IsAiGenerated");

                    b.HasIndex("QuestionType");

                    b.HasIndex("Subject");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("schools", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClassIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DailyStreak")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("LastActivityDate")
                        .HasColumnType("date");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("ParentEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("ParentalConsentGranted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionTier")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("XpPoints")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("Level");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubscriptionTier");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.StudentAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentQuestionIndex")
                        .HasColumnType("integer");

                    b.Property<double?>("EstimatedAbility")
                        .HasColumnType("double precision");

                    b.Property<string>("Feedback")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("IncorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<bool?>("Passed")
                        .HasColumnType("boolean");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("SkippedQuestions")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TimeSpentSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("XpEarned")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("SchoolId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId", "AssessmentId");

                    b.ToTable("student_assessments", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.StudentResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AbilityAtTime")
                        .HasColumnType("double precision");

                    b.Property<string>("AiExplanation")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("integer");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentAnswer")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("StudentAssessmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TimeSpentSeconds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsCorrect");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentAssessmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentAssessmentId", "QuestionId")
                        .IsUnique();

                    b.ToTable("student_responses", (string)null);
                });

            modelBuilder.Entity("AcademicAssessment.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.HasIndex("SchoolId");

                    b.ToTable("users", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
